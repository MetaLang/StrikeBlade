<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprShipBossAttack</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>objPlatform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

hp = 3;

startX = x;
startY = y;

flightPathRight = false;

damage = 1;

pointsValue = 200;

runSpeed = 0;

range = 20000;

currentState = BossShipStates.attacking;

droneMinHeight = room_height / 8;
droneMaxHeight = room_height / 4;
droneCurrentHeight = droneMaxHeight;

laserRefreshed = true;
bombRefreshed = true;
spanDronesRefreshed = true;

coolDownTime = seconds(1.5);
droneRefreshTime = seconds(10);
laserDuration = seconds(5);
flightPathChangeTime = seconds(3);

instance_create(x-100, y-250, objBossHeart);
instance_create(x, y-250, objBossHeart);
instance_create(x+100, y-250, objBossHeart);



alarm[3] = flightPathChangeTime;

image_speed = 1/3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = true;
solid = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(flightPathRight) {
    flightPathRight = false;
}
else {
    flightPathRight = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>flightPathChangeTime</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>3</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Refresh laser beam
currentState = BossShipStates.attacking;
laserRefreshed = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Refresh drones
spanDronesRefreshed = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Leaving Attacking state
bombRefreshed = true;

if(droneCurrentHeight == droneMaxHeight) {
 //   droneCurrentHeight = droneMinHeight;
} 
else {
 //   droneCurrentHeight = droneMaxHeight;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check for certain dealth
if(hp &lt; 1) {
        currentState = BossShipStates.exploding;
}

    
// Check if Hero is on left or right
//image_angle = point_direction(x, y, objPlayer.x, objPlayer.y);

switch(currentState) {
    case BossShipStates.attacking:
    
        if(flightPathRight) {
            x += runSpeed;
        }
        else {
             x -= runSpeed;
        }
            
    
        // Check if bot is ready to attack
        if(laserRefreshed) { // Beam Laser
      //      instance_create(x, y, objLaserBeam);
            alarm[BossShipAlarms.laserDuration] = laserDuration; // Cool down
            laserRefreshed = false;
            //runSpeed = 0;
            currentState = BossShipStates.coolingDown;  
        }
        
        if(bombRefreshed) { // Drop Bomb
          //  instance_create(x, y, objBotBomb);
            alarm[BossShipAlarms.laser] = coolDownTime; // Cool down
            bombRefreshed = false;
        }
        
        if(spanDronesRefreshed) { // Spawn Drones
           // instance_create(x+128, y+64, objAttackDrone);
           // instance_create(x-128, y+64, objAttackDrone);
            alarm[BossShipAlarms.droneRefresh] = droneRefreshTime; // Cool down
            currentState = BossShipStates.attacking;
            spanDronesRefreshed = false;
        }

    break;
        
    case BossShipStates.coolingDown:
       // sprite_index = sprAttackDroneCooling;
     //   sprite_index = sprHeavyAttackDroneBomb;
        runSpeed = 0;
    break;
        
    case BossShipStates.exploding:
        // Create Explosion
        effect_create_above(ef_explosion, x, y, 1, c_blue);
        effect_create_above(ef_firework, x, y, 1, c_yellow);
        var scorePopUp = instance_create(x, y, objScore);
        scorePopUp.pointsValue = pointsValue;
        with(objLaserBeamMessenger) {
            instance_destroy();
        }
        
        with(objLaserBeam) {
            instance_destroy();
        }

        instance_destroy();
    break; 
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBotDeflectedLaser">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>128,32</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
