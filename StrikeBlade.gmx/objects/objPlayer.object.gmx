<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprIdleRightBlack</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>facing = Direction.right;
currentAnimation = Animations.idle;
runSpeed = 13;
jumpSpeed = -20;
swordThrowSpeed = 40;
swordThrowDist = 1000;
maxJumps = 2;
jumpCount = 0;
damage = 1;
invincible = false;

armourColours = sbArray(
    c_red,
    c_blue,
    c_green,
    c_black,
);

maxArmourLevel = array_length_1d(armourColours) - 1;
armourLevel = maxArmourLevel;
reticule = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(objSword)) with (objSword)
{
    instance_destroy();
}

if (instance_exists(objReticule)) with (objReticule)
{
    instance_destroy();   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invincible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (isPressedNoConflict(KEYS.d) &amp;&amp; canMoveInDir(keyToDir(KEYS.d)))
{
    facing = Direction.right;
    currentAnimation = Animations.run;
    x += runSpeed;
}

if (isPressedNoConflict(KEYS.a) &amp;&amp; canMoveInDir(keyToDir(KEYS.a)))
{
    facing = Direction.left;
    currentAnimation = Animations.run;
    x -= runSpeed;
}

if (keyboard_check_released(KEYS.d) || keyboard_check_released(KEYS.a))
{
    currentAnimation = Animations.idle;
}

if (isPressed(KEYS.w) &amp;&amp; !place_free(x, y + 1))
{
    y += jumpSpeed;
    vspeed = jumpSpeed;
}

if (place_free(x, y + 1))
{
    friction = 0;
    gravity = 2;
    gravity_direction = 270;
}
else
{
    gravity = 0;
    friction = 8;
}

if (facing == Direction.right)
{
    if (isPressed(dirToKey(facing)) &amp;&amp; !place_free(x, y + 1))
    {
        sprite_index = getPlayerSprite(facing, currentAnimation);
    }
    else
    {
        sprite_index = getPlayerSprite(facing, currentAnimation);
    }
}
else if (facing == Direction.left)
{
    if (isPressed(dirToKey(facing)) &amp;&amp; !place_free(x, y + 1))
    {
        sprite_index = getPlayerSprite(facing, currentAnimation);
    }
    else
    {
        sprite_index = getPlayerSprite(facing, currentAnimation);
    }
}
else
{
    assert(false, "Unexpected value for 'facing': ", facing);
}

if (mouse_check_button(mb_left) &amp;&amp; !instance_exists(objThrownSword))
{
    var sword = instance_find(objAttackSword, 0);
    if (sword == noone)
    {
        sword = instance_create(0, 0, objAttackSword);
    }
    var dir = point_direction(x, y - (sprite_height / 2), 
                              mouse_x, mouse_y);
    var swordX = lengthdir_x(sprite_width  / 2 + 30, dir);
    var swordY = lengthdir_y(sprite_height / 2 + 40, dir);
    var swordXRelativeToPlayer = x + swordX;
    var swordYRelativeToPlayer = y - sprite_height / 2 + swordY;
    //with (instance_create(x + swordX, y - (sprite_height / 2) + swordY, objAttackSword))
    //if (swordX &gt;= -sprite_width / 2 &amp;&amp; swordX &lt;= x + sprite_width / 2)
    //{
    with (sword)
    {
        x = swordXRelativeToPlayer;
        y = swordYRelativeToPlayer;
        facing = objPlayer.facing;
        var newAngle = dir - 90;
        //if (newAngle &lt;= 45 || newAngle &gt;= 215)
        //{
            image_angle = newAngle;
        //}
        //alarm[AttackSwordAlarms.swing] = sbSeconds(0.5);
        //path_start(pthSwordSwing, swingSpeed, 0, true);
    }
    //}
}
else if (mouse_check_button_pressed(mb_left) &amp;&amp; instance_exists(objThrownSword))
{
    with (objThrownSword)
    {
        instance_destroy();
    }
}
else if (mouse_check_button_released(mb_left) &amp;&amp; instance_exists(objAttackSword))
{
    with (objAttackSword)
    {
        instance_destroy();
    }
}
else if (mouse_check_button_released(mb_right) &amp;&amp; !instance_exists(objAttackSword))
{
    if (instance_exists(objThrownSword))
    {
        var canTeleport = !(place_meeting(objThrownSword.x - sprite_width / 2, objThrownSword.y - sprite_height / 2, objPlatform)
                            || place_meeting(objThrownSword.x - sprite_width / 2, objThrownSword.y + sprite_height / 2, objPlatform)
                            || place_meeting(objThrownSword.x + sprite_width / 2, objThrownSword.y + sprite_height / 2, objPlatform)
                            || place_meeting(objThrownSword.x + sprite_width / 2, objThrownSword.y - sprite_height / 2, objPlatform));
        if (canTeleport)
        {
            x = objThrownSword.x;
            y = objThrownSword.y + (sprite_height / 2);
            direction = objThrownSword.direction;
            speed = objThrownSword.speed / 2;
            with (objThrownSword)
            {
                instance_destroy();
            }
        }
    }
    else
    {
        //var swordStartX = x + getDirSign(facing) * (runSpeed + swordThrowSpeed);
        with (instance_create(x + getDirSign(facing), y - (sprite_height / 2), objThrownSword))
        {
            facing = objPlayer.facing;
            throwDist = objPlayer.swordThrowDist;
            var dir = point_direction(objPlayer.x, 
                                      objPlayer.y - (objPlayer.sprite_height / 2), 
                                      mouse_x, 
                                      mouse_y);
            direction = dir;
            speed = objPlayer.swordThrowSpeed;
            image_angle += dir - 90;
        }
    }
}

if (instance_exists(objAttackSword))
{
    with (reticule)
    {
        instance_destroy();
    }
    reticule = noone;
}
else
{
    if (reticule == noone)
    {
        reticule = makeReticule();
    }
    updateReticule();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="damageSource">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>damageArmour(other.armourDamage);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(direction, vspeed * -sign(direction));
vspeed = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

//draw_text(room_width / 2, 50, "Armour Level: " + string(armourLevel));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,44</point>
    <point>22,22</point>
  </PhysicsShapePoints>
</object>
