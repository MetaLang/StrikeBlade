<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprIdleRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>facing = Direction.right;
currentAnimation = Animations.idle;
runSpeed = 13;
jumpSpeed = -20;
swordThrowSpeed = 40;
swordThrowDist = 1000;
maxJumps = 2;
jumpCount = 0;
damage = 1;
invincible = false;
hasPuzzleKey = false;
//armourLevel = 4;
reticule = noone;
movementEnabled = true;
canThrowSword = true;

stuckTo = "";
stuckX1 = 0;
stuckY1 = 0;
stuckX2 = 0;
stuckY2 = 0;
stuckOriginX = 0;
stuckOriginY = 0;
top2 = 0;
bottom2 = 0;
left2 = 0;
right2 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(objSword)) with (objSword)
{
    instance_destroy();
}

if (instance_exists(objReticule)) with (objReticule)
{
    instance_destroy();   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//PlayerAlarms.restoreMovement

movementEnabled = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//PlayerAlarms.blink

if (image_alpha == 1.0)
{
    image_alpha = 0.2;
}
else
{
    image_alpha = 1.0;
}
alarm[PlayerAlarms.blink] = seconds(0.3);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//PlayerAlarms.invincibility

invincible = false;
alarm[PlayerAlarms.blink] = -1;
if (image_alpha != 1.0)
{
    image_alpha = 1.0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_check_button(mb_left) &amp;&amp; !instance_exists(objThrownSword))
{
    if(!audio_is_playing(sndSwordUnsheath))
            audio_play_sound(sndSwordUnsheath, 10, false)
            
    var sword = instance_find(objAttackSword, 0);
    if (sword == noone)
    {
        sword = instance_create(0, 0, objAttackSword);
    }
    var dir = point_direction(x, y - (sprite_height / 2), 
                              mouse_x, mouse_y);
    var swordX = lengthdir_x(sprite_width  / 2 + 30, dir);
    var swordY = lengthdir_y(sprite_height / 2 + 40, dir);
    var swordXRelativeToPlayer = x + swordX;
    var swordYRelativeToPlayer = y - sprite_height / 2 + swordY;
    //with (instance_create(x + swordX, y - (sprite_height / 2) + swordY, objAttackSword))
    //if (swordX &gt;= -sprite_width / 2 &amp;&amp; swordX &lt;= x + sprite_width / 2)
    //{
    with (sword)
    {
        x = swordXRelativeToPlayer;
        y = swordYRelativeToPlayer;
        facing = objPlayer.facing;
        var newAngle = dir - 90;
        //if (newAngle &lt;= 45 || newAngle &gt;= 215)
        //{
            image_angle = newAngle;
        //}
        //alarm[AttackSwordAlarms.swing] = sbSeconds(0.5);
        //path_start(pthSwordSwing, swingSpeed, 0, true);
    }
    //}
}
else if (mouse_check_button_pressed(mb_left) &amp;&amp; instance_exists(objThrownSword))
{
    if (objThrownSword.speed == 0) with (objThrownSword)
    {
        instance_destroy();
    }
}
else if (mouse_check_button_released(mb_left) &amp;&amp; instance_exists(objAttackSword))
{
    with (objAttackSword)
    {
        instance_destroy();
    }
}
else if (mouse_check_button_released(mb_right) &amp;&amp; canThrowSword &amp;&amp; !instance_exists(objAttackSword))
{
    audio_play_sound(sndThrow, 10, false);
    if (instance_exists(objThrownSword))
    {
        /*
        var canTeleport = !(place_meeting(objThrownSword.x - sprite_width / 2, objThrownSword.y - sprite_height / 2, objPlatform)
                            || place_meeting(objThrownSword.x - sprite_width / 2, objThrownSword.y + sprite_height / 2, objPlatform)
                            || place_meeting(objThrownSword.x + sprite_width / 2, objThrownSword.y + sprite_height / 2, objPlatform)
                            || place_meeting(objThrownSword.x + sprite_width / 2, objThrownSword.y - sprite_height / 2, objPlatform));
        */
        //if (canTeleport)
        {
            
            canThrowSword = false;
            var NextX = objThrownSword.x;
            var NextY = objThrownSword.y + (sprite_height / 2);
            
            var bottom = bbox_bottom+NextY-y;
            var top = bbox_top+NextY-y;
            var left = bbox_left+NextX-x-10;
            var right = bbox_right+NextX-x+10;

            var instance;
            instance = collision_rectangle(left,top,right,bottom,objPlatform,true,true);
            if(instance) {
                with (instance) {
                    stuckTo2 = "";
                    if( bottom-bbox_top &gt; 10 &amp;&amp; bbox_top &lt;= bottom &amp;&amp; bbox_top &gt;= top &amp;&amp; bbox_bottom &gt; bottom &amp;&amp; !collision_rectangle(left,bbox_top-20,right,bbox_top,objPlatform,true,true)) 
                    {    
                        stuckTo2 += "floor " + string(bottom-bbox_top+5); 
                        NextY -= bottom-bbox_top+5;
                    }
                    else if(bbox_bottom-top &gt; 10 &amp;&amp; bbox_bottom &lt;= bottom &amp;&amp; bbox_bottom &gt;= top &amp;&amp; bbox_top &lt; top &amp;&amp; !collision_rectangle(left,bbox_bottom,right,bbox_bottom+20,objPlatform,true,true))
                    {
                        stuckTo2 += "ceiling";
                        NextY += bbox_bottom-top+5;
                    }
                    else if(bbox_left &lt;= right &amp;&amp; bbox_left &gt;= left &amp;&amp; bbox_right &gt; right)
                    {
                        stuckTo2 += "leftOfWall";
                        NextX -= right-bbox_left+5;
                    }
                    else if(bbox_right &lt;= right &amp;&amp; bbox_right &gt;= left)
                    {
                        stuckTo2 += "rightOfWall";
                        NextX += bbox_right-left+5;
                    }
                }        
                direction = 270;
                vspeed = 0;
            }

            x = NextX;
            y = NextY;
            
            direction = objThrownSword.direction;
            speed = objThrownSword.speed / 2;
            with (objThrownSword)
            {
                instance_destroy();
            }
            effect_create_above(ef_ring, x, y - sprite_height / 2, 2, c_blue);
            audio_play_sound(sndHitGround, 10, false);
        }
    }
    else
    {
        //var swordStartX = x + getDirSign(facing) * (runSpeed + swordThrowSpeed);
        with (instance_create(x + getDirSign(facing), y - (sprite_height / 2), objThrownSword))
        {
            facing = objPlayer.facing;
            throwDist = objPlayer.swordThrowDist;
            var dir = point_direction(objPlayer.x, 
                                      objPlayer.y - (objPlayer.sprite_height / 2), 
                                      mouse_x, 
                                      mouse_y);
            direction = dir;
            speed = objPlayer.swordThrowSpeed;
            image_angle += dir - 90;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var AddX = 0;
var AddY = 0;

if (isPressedNoConflict(KEYS.d) &amp;&amp; canMoveInDir(keyToDir(KEYS.d)))
{
    facing = Direction.right;
    currentAnimation = Animations.run;
    AddX += runSpeed;
    /*
    if (place_meeting(x + runSpeed, y, objTutorialPlatform))
    {
        y -= sprTutorialPlatform.sprite_height;
        move_contact_solid(gravity_direction, sprTutorialPlatform.sprite_height);
    }
    */
}

if (isPressedNoConflict(KEYS.a) &amp;&amp; canMoveInDir(keyToDir(KEYS.a)))
{
    facing = Direction.left;
    currentAnimation = Animations.run;
    AddX -= runSpeed;
    /*
    if (place_meeting(x - runSpeed, y, objTutorialPlatform))
    {
        y -= sprTutorialPlatform.sprite_height;
        move_contact_solid(gravity_direction, sprTutorialPlatform.sprite_height);
    }
    */
}

if (keyboard_check_released(KEYS.d) || keyboard_check_released(KEYS.a))
{
    currentAnimation = Animations.idle;
}

if ((isPressed(KEYS.w) || isPressed(KEYS.space)) 
    &amp;&amp; movementEnabled &amp;&amp; !place_free(AddX + x, AddY + y + 1))
{
    AddY += jumpSpeed;
    vspeed = jumpSpeed;
    audio_play_sound(sndJump2, 10, false);
}

if (place_free(AddX + x, AddY + y + 1))
{
    friction = 0;
    gravity = 2;
    gravity_direction = 270;
}
else
{
    gravity = 0;
    friction = 8;
    canThrowSword = true;
}

var bottom = bbox_bottom+AddY;
var top = bbox_top+AddY;
var left = bbox_left+AddX-5;
var right = bbox_right+AddX+5;
bottom2 = bottom;
top2=top;
left2=left;
right2=right;

var instance;
instance = collision_rectangle(left,top,right,bottom,objPlatform,true,true);
if(instance) {
    //stuckTo = instance;
    var stuckTo2;
    var stuckX12;
    var stuckY12;
    var stuckX22;
    var stuckY22;
    var stuckOriginX2;
    var stuckOriginY2;
    with (instance) {
        stuckX12 = bbox_left;
        stuckY12 = bbox_top;
        stuckX22 = bbox_right
        stuckY22 = bbox_bottom;
        stuckOriginX2 = x;
        stuckOriginY2 = y;
        stuckTo2 = "";
        if( bottom-bbox_top &gt; 10 &amp;&amp; bbox_top &lt;= bottom &amp;&amp; bbox_top &gt;= top &amp;&amp; bbox_bottom &gt; bottom &amp;&amp; !collision_rectangle(left,bbox_top-20,right,bbox_top,objPlatform,true,true)) 
        {    
            stuckTo2 += "floor " + string(bottom-bbox_top+5); 
            AddY -= bottom-bbox_top+5;
        }
        else if(bbox_bottom-top &gt; 10 &amp;&amp; bbox_bottom &lt;= bottom &amp;&amp; bbox_bottom &gt;= top &amp;&amp; bbox_top &lt; top &amp;&amp; !collision_rectangle(left,bbox_bottom,right,bbox_bottom+20,objPlatform,true,true))
        {
            stuckTo2 += "ceiling";
            AddY += bbox_bottom-top+5;
        }
        else if(bbox_left &lt;= right &amp;&amp; bbox_left &gt;= left &amp;&amp; bbox_right &gt; right)
        {
            stuckTo2 += "leftOfWall";
            AddX -= right-bbox_left+5;
        }
        else if(bbox_right &lt;= right &amp;&amp; bbox_right &gt;= left)
        {
            stuckTo2 += "rightOfWall";
            AddX += bbox_right-left+5;
        }
    }
    if(stuckTo2!="")
        stuckTo += " / "+stuckTo2;
        
    stuckX1 = stuckX12;
    stuckY1 = stuckY12;
    stuckX2 = stuckX22;
    stuckY2 = stuckY22;
    stuckOriginX = stuckOriginX2;
    stuckOriginY = stuckOriginY2;
    
    direction = 270;
    vspeed = 0;
}

if(AddX+AddY!=0)
    move_contact_solid(point_direction(x,y,x+AddX,y+AddY), point_distance(x,y,x+AddX,y+AddY));

if (facing == Direction.right)
{
    if (isPressed(dirToKey(facing)) &amp;&amp; !place_free(x, y + 1))
    {
        sprite_index = getPlayerSprite(facing, currentAnimation);
    }
    else
    {
        sprite_index = getPlayerSprite(facing, currentAnimation);
    }
}
else if (facing == Direction.left)
{
    if (isPressed(dirToKey(facing)) &amp;&amp; !place_free(x, y + 1))
    {
        sprite_index = getPlayerSprite(facing, currentAnimation);
    }
    else
    {
        sprite_index = getPlayerSprite(facing, currentAnimation);
    }
}
else
{
    assert(false, "Unexpected value for 'facing': ", facing);
}

if (instance_exists(objAttackSword))
{
    with (reticule)
    {
        instance_destroy();
    }
    reticule = noone;
}
else
{
    if (reticule == noone)
    {
        reticule = makeReticule();
    }
    updateReticule();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlocker">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (y &gt; other.y &amp;&amp; vspeed &gt; 0)
{
    //Hitting the blocker from above
    canThrowSword = true;
}
move_contact_solid(direction, vspeed * -sign(direction));
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="damageSource">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>damageArmour(other.armourDamage);
audio_play_sound(sndHurt, 10, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stuckTo = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>background_x[1] = view_xview[0] * 1;
background_x[2] = view_xview[0] * 0.95;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

//Display Score
draw_set_color(c_white);
draw_set_font(fntScore);
draw_text(view_xview+64,view_yview+64, string(score));
//draw_text(room_width / 2, 50, "Armour Level: " + string(armourLevel));

draw_text(x-48, y-130, "Stuck to : " + string(stuckTo));
draw_rectangle_colour(stuckX1, stuckY1, stuckX2, stuckY2, c_red, c_red, c_red, c_red, true);
draw_line_width_colour(stuckOriginX-100, stuckOriginY, stuckOriginX+100, stuckOriginY, 5, c_red, c_red);
draw_line_width_colour(stuckOriginX, stuckOriginY-100, stuckOriginX, stuckOriginY+100, 5, c_red, c_red)
;
draw_rectangle_colour(left2, bottom2, right2, top2, c_red, c_red, c_red, c_red, true);

draw_rectangle_colour(bbox_left, bbox_bottom, bbox_right, bbox_top, c_lime, c_lime, c_lime, c_lime, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,44</point>
    <point>22,22</point>
  </PhysicsShapePoints>
</object>
