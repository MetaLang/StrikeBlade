<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSword</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objSword</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

creationPointX = x;
creationPointY = y;
throwDist = 0;
facing = Direction.right;
emitParticles = true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (emitParticles)
{
    var swordX = x;
    var swordY = y;
    var swordAngle = image_angle;
    with (objPlayer) if (distance_to_point(swordX, swordY) &gt;= 10)
    {
        effect_create_above(ef_ring, swordX, swordY, 0, c_blue);
    }
}

if (distance_to_point(creationPointX, creationPointY) &gt; throwDist
    || distance_to_point(objPlayer.x, 
                         objPlayer.y - objPlayer.sprite_height / 2) &gt; throwDist)
{
    instance_destroy();
}

/*
var facingMultiplier = 0;
if (facing == Direction.right)
{
    facingMultiplier = 1;
    if (sprite_index != sprSwordRight)
    {
        sprite_index = sprSwordRight;
    }
}
else if (facing == Direction.left)
{
    facingMultiplier = -1;
    if (sprite_index != sprSwordLeft)
    {
        sprite_index = sprSwordLeft;
    }
}

var deltaAngle = -1 * (MOUSE.xVelocity * 5 + MOUSE.yVelocity * 10); 
image_angle += deltaAngle;
image_angle = clamp(image_angle, -90, 45);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlocker">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(direction, vspeed * -sign(direction));
speed = 0;
emitParticles = false;
audio_play_sound(sndHitGround, 10, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (speed == 0)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (DEBUG_INFO_ENABLED)
{
    var oldColour = draw_get_colour();
    draw_set_colour(c_green);
    
    if (distance_to_point(creationPointX, creationPointY) &gt; throwDist - 100)
    {
        draw_set_colour(c_red);
        draw_circle(creationPointX, creationPointY, 5, false);
        draw_line(creationPointX, creationPointY, x, y);
        draw_set_colour(c_green);
    }
    else
    {
        draw_circle(creationPointX, creationPointY, 5, false);
        draw_line(creationPointX, creationPointY, x, y);
    }
    
    if (distance_to_point(objPlayer.x, 
            objPlayer.y - objPlayer.sprite_height / 2) &gt; throwDist - 100)
    {
        draw_set_colour(c_red);
        draw_line(x, y, objPlayer.x, objPlayer.y - objPlayer.sprite_height / 2);
        draw_set_colour(c_green);
    }
    else
    {   
        draw_line(x, y, objPlayer.x, objPlayer.y - objPlayer.sprite_height / 2);
    }
    
    draw_circle(objPlayer.x, objPlayer.y, throwDist, true);
    draw_set_colour(oldColour);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
