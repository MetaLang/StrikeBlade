<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSwordRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>creationPointX = x;
creationPointY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (distance_to_point(creationPointX, creationPointY) &gt; 400
    || distance_to_point(objPlayer.x, 
            objPlayer.y - objPlayer.sprite_height / 2) &gt; 400)
{
    instance_destroy();
}

/*
var facingMultiplier = 0;
if (facing == Direction.right)
{
    facingMultiplier = 1;
    if (sprite_index != sprSwordRight)
    {
        sprite_index = sprSwordRight;
    }
}
else if (facing == Direction.left)
{
    facingMultiplier = -1;
    if (sprite_index != sprSwordLeft)
    {
        sprite_index = sprSwordLeft;
    }
}

var deltaAngle = -1 * (MOUSE.xVelocity * 5 + MOUSE.yVelocity * 10); 
image_angle += deltaAngle;
image_angle = clamp(image_angle, -90, 45);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(direction, vspeed * -sign(direction));
vspeed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (DEBUG_INFO_ENABLED)
{
    var oldColour = draw_get_colour();
    draw_set_colour(c_green);
    
    if (distance_to_point(creationPointX, creationPointY) &gt; 300)
    {
        draw_set_colour(c_red);
        draw_circle(creationPointX, creationPointY, 5, false);
        draw_line(creationPointX, creationPointY, x, y);
        draw_set_colour(c_green);
    }
    else
    {
        draw_circle(creationPointX, creationPointY, 5, false);
        draw_line(creationPointX, creationPointY, x, y);
    }
    
    if (distance_to_point(objPlayer.x, objPlayer.y - objPlayer.sprite_height / 2) &gt; 300)
    {
        draw_set_colour(c_red);
        draw_line(x, y, objPlayer.x, objPlayer.y - objPlayer.sprite_height / 2);
        draw_set_colour(c_green);
    }
    else
    {   
        draw_line(x, y, objPlayer.x, objPlayer.y - objPlayer.sprite_height / 2);
    }
    
    draw_circle(objPlayer.x, objPlayer.y, 400, true);
    draw_set_colour(oldColour);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
