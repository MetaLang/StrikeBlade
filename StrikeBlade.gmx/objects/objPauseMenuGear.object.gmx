<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPauseMenuGear</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-105</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
showMenu = false;
menuLabels = sbArray(noone, noone, noone);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = MenuGearImages.lighter;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = MenuGearImages.darker;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = MenuGearImages.darker;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*image_index = MenuGearImages.lighter;

if (showMenu)
{
    showMenu = false;
    var menuLabelCount = instance_number(objMenuLabel);
    while (menuLabelCount &gt;= 0)
    {
        with (objMenuLabel)
        {
            instance_destroy();
        }
        menuLabelCount--;
    }
    instance_activate_all();
}
else
{
    showMenu = true;
    effect_clear();
    instance_deactivate_all(true);
    instance_activate_object(objBlocker);
}

if (showMenu)
{
    var vi = view_current;
    var menuX = 700; 
    var menuY = 100;
    var oldColour = draw_get_colour();
    
    draw_set_colour(c_black);
    leftTopCornerX = view_xview + menuX;
    leftTopCornerY = view_yview + menuY;
    rightBottomCornerX = view_xview + view_wview - menuX;
    rightBottomCornerY = view_yview + view_hview - menuY;
    draw_rectangle(leftTopCornerX, leftTopCornerY, rightBottomCornerX, rightBottomCornerY, false);
    
    draw_set_colour(c_gray);
    draw_rectangle(
        leftTopCornerX + 1, 
        leftTopCornerY + 1, 
        rightBottomCornerX - 1, 
        rightBottomCornerY - 1, 
        true
    );
    
    draw_set_colour(oldColour);
    
    var mediumLabelHeight = sprite_get_height(sprMenuLabelBase);
    var largeLabelHeight = sprite_get_height(sprMenuLabelPaused);
    var labelYPos = leftTopCornerY + largeLabelHeight;
    var spaceBetweenButtons = 50;
    for (var i = 0; i &lt; array_length_1d(menuLabels); i++)
    {
        switch (i)
        {
            case 0:
                menuLabels[i] = instance_create(leftTopCornerX + view_wport / 2 - menuX, labelYPos, objMenuLabelTitle);
            break;
            
            case 1:
                labelYPos += mediumLabelHeight + 2 * spaceBetweenButtons;
                menuLabels[i] = instance_create(leftTopCornerX + view_wport / 2 - menuX, labelYPos, objMenuLabelRestart);
            break;
            
            case 2:
                labelYPos += mediumLabelHeight + spaceBetweenButtons;
                menuLabels[i] = instance_create(leftTopCornerX + view_wport / 2 - menuX, labelYPos, objMenuLabelExit);
            break;
            
            default:
                assert(false, "This should never be reached");
        }
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (keyboard_check_pressed(vk_escape) || mouse_check_button_pressed(mb_left))
{
    image_alpha = 1;
    image_index = MenuGearImages.lighter;
    if (showMenu)
    {
        showMenu = false;
        var menuLabelCount = instance_number(objMenuLabel);
        while (menuLabelCount &gt;= 0)
        {
            with (objMenuLabel)
            {
                instance_destroy();
            }
            menuLabelCount--;
        }
        instance_activate_all();
    }
    else
    {
        showMenu = true;
        effect_clear();
        instance_deactivate_all(true);
        instance_activate_object(objBlocker);
    }
    
    if (showMenu)
    {
        var vi = view_current;
        var menuX = 700; 
        var menuY = 100;
        var oldColour = draw_get_colour();
        
        draw_set_colour(c_black);
        leftTopCornerX = view_xview + menuX;
        leftTopCornerY = view_yview + menuY;
        rightBottomCornerX = view_xview + view_wview - menuX;
        rightBottomCornerY = view_yview + view_hview - menuY;
        draw_rectangle(leftTopCornerX, leftTopCornerY, rightBottomCornerX, rightBottomCornerY, false);
        
        draw_set_colour(c_gray);
        draw_rectangle(
            leftTopCornerX + 1, 
            leftTopCornerY + 1, 
            rightBottomCornerX - 1, 
            rightBottomCornerY - 1, 
            true
        );
        
        draw_set_colour(oldColour);
        
        var mediumLabelHeight = sprite_get_height(sprMenuLabelBase);
        var largeLabelHeight = sprite_get_height(sprMenuLabelPaused);
        var labelYPos = leftTopCornerY + largeLabelHeight;
        var spaceBetweenButtons = 50;
        for (var i = 0; i &lt; array_length_1d(menuLabels); i++)
        {
            switch (i)
            {
                case 0:
                    menuLabels[i] = instance_create(leftTopCornerX + view_wport / 2 - menuX, labelYPos, objMenuLabelTitle);
                break;
                
                case 1:
                    labelYPos += mediumLabelHeight + 2 * spaceBetweenButtons;
                    menuLabels[i] = instance_create(leftTopCornerX + view_wport / 2 - menuX, labelYPos, objMenuLabelRestart);
                break;
                
                case 2:
                    labelYPos += mediumLabelHeight + spaceBetweenButtons;
                    menuLabels[i] = instance_create(leftTopCornerX + view_wport / 2 - menuX, labelYPos, objMenuLabelExit);
                break;
                
                default:
                    assert(false, "This should never be reached");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,64</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
