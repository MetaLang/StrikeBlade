<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAttackDroneCooling</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

hp = 1;
runSpeed = 5;
range = 600;
pointsValue = 100;
currentState = RangedBotStates.flyingToHero;
droneMinHeight = room_height - 400;
droneMaxHeight = room_height - 700;
droneCurrentHeight = droneMaxHeight;
coolDownTime = seconds(3);
image_speed = 1/3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Leaving Attacking state
currentState = RangedBotStates.flyingToHero;

if(droneCurrentHeight == droneMaxHeight) {
    droneCurrentHeight = droneMinHeight;
} 
else {
    droneCurrentHeight = droneMaxHeight;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check for certain dealth
if(hp &lt; 1) {
 currentState = RangedBotStates.exploding;
}

// Check if bot is high enough
if(abs(y - droneCurrentHeight) &gt; runSpeed * 2) {
    if(y - droneCurrentHeight &gt; 0) {
        y -= runSpeed;
    }
    else {
        y += runSpeed;
    }
}

// Check if Hero is on left or right
image_angle = point_direction(x, y, objPlayer.x, objPlayer.y);

switch(currentState) {
    case RangedBotStates.flyingToHero:
        sprite_index = sprAttackDroneIdle;
        if(distance_to_object(objPlayer) &gt; range &amp;&amp; (abs(x - objPlayer.x) &gt; runSpeed * 2)) {
            move_towards_point(objPlayer.x, y, runSpeed);
           
        }
        else {
            currentState = RangedBotStates.attacking;
        }
    break;
    
    case RangedBotStates.attacking:
        // Shoot Laser
        instance_create(x, y, objBotLaser);
        alarm[AttackDroneAlarms.laser] = coolDownTime; // Cool down
        currentState = RangedBotStates.coolingDown;
    break;
        
    case RangedBotStates.coolingDown:
        sprite_index = sprAttackDroneCooling;
        speed = 0;
        
    break;
        
    case RangedBotStates.exploding:
        // Create Explosion
        effect_create_above(ef_explosion, x, y, 1, c_blue);
        effect_create_above(ef_firework, x, y, 1, c_yellow);
        var scorePopUp = instance_create(x, y, objScore);
        scorePopUp.pointsValue = pointsValue;
        instance_destroy();
    break; 
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBotDeflectedLaser">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= other.damage;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSword">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= other.damage;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
